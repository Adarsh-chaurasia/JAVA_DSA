// Brute force Approach
O(N) Space
O(N) Time

class Solution {
    public List<Integer> majorityElement(int[] nums)
    {
        Map<Integer , Integer> hashmap = new HashMap<>();
        int length = nums.length;
        for (int each : nums){
            hashmap.put(each,hashmap.getOrDefault(each,0)+1);
        }

        List<Integer> result = new ArrayList<>();

        for(Map.Entry<Integer , Integer> items : hashmap.entrySet())
        {
            int key = items.getKey();
            int value = items .getValue();

            if(value > length/3){
                result.add(key);
            }

        }

        return result;
    }
}



// Optimized Approach
O(N) Time
O(1) Space

class Solution {
    public List<Integer> majorityElement(int[] nums)
    {
        List<Integer> result = new ArrayList<>();

        int count1 = 0 , count2 = 0;
        int candidate1 = 0 , candidate2 = 0;

        int n = nums.length;

        for(int i = 0 ; i<n ;i++)
        {
            if(nums[i] == candidate1) 
                count1++;
            else if(nums[i] == candidate2)
                count2++;   
            else if(count1 == 0)
            {
              candidate1 = nums[i];
              count1++;
            }
            else if(count2 == 0)
            {
                candidate2 = nums[i];
                count2++;
            }
           
            else
            {
                count1--;
                count2--;
            }
        }

        count1 = 0;
        count2 = 0;

        for(int i = 0 ; i < n ; i++)
        {
            if(candidate1 == nums[i])
                count1++;
            else if(candidate2 == nums[i])
                count2++;

        }


        if(count1 > n/3)    
            result.add(candidate1);
        if(count2 > n/3)    
            result.add(candidate2);
       
        return result;
    }
}
