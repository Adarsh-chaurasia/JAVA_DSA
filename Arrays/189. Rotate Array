//Brute Force Approach
O(N) Space
O(N) Time

class Solution {
    public void rotate(int[] nums, int k) {
        
    if(k > nums.length)
    {
        k=k%nums.length;
    }
    
    int[] result=new int[nums.length];
    int j=0;
    for(int i=k;i<nums.length;i++){
        result[i]=nums[j];
        j++;
    }
    
    for(int i=0;i<k;i++){
        result[i]=nums[j];
        j++;
        
    }
    System.arraycopy( result, 0, nums, 0, nums.length );



    }
}


Optimized Recursive Approach
O(1) Space 


class Solution {

    public void reverse(int[] arr , int start , int end)
    {
        while (start < end)
        {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;

            start++;
            end--;
        }

    }



    public void rotate(int[] arr, int k) {
        
        if(k== 0){
            return;
        }
        int n =  arr.length;
        if(k > n)
        {
            k=k%n;
        }
        reverse(arr,0 ,n-1);
        reverse(arr,0,k-1);
        reverse(arr,k,n-1);


        
    



    }
}
